{
    "NeuroVis Educational Component": {
        "prefix": "neuro-component",
        "body": [
            "## ${1:ComponentName}.gd",
            "## Educational Purpose: ${2:Learning objective for medical students}",
            "## Clinical Relevance: ${3:How this serves medical education}",
            "## Performance Impact: ${4:Memory/CPU considerations}",
            "## Dependencies: ${5:What this component relies on}",
            "",
            "class_name ${1:ComponentName}",
            "extends ${6:BaseClass}",
            "",
            "# === EDUCATIONAL CONSTANTS ===",
            "const LEARNING_OBJECTIVE: String = \"${2:Learning objective for medical students}\"",
            "const CLINICAL_CONTEXT: String = \"${3:How this serves medical education}\"",
            "",
            "# === EDUCATIONAL SIGNALS ===",
            "## Emitted when educational milestone is achieved",
            "signal learning_progress_updated(progress: float, milestone: String)",
            "",
            "# === EDUCATIONAL EXPORTS ===",
            "@export var accessibility_enabled: bool = true",
            "@export var educational_mode: bool = true",
            "",
            "# === PRIVATE VARIABLES ===",
            "var _educational_state: Dictionary = {}",
            "var _is_initialized: bool = false",
            "",
            "## Initialize educational component with proper validation",
            "## @param config Dictionary - Educational configuration parameters",
            "## @return bool - True if initialization successful for educational use",
            "func initialize_educational_component(config: Dictionary) -> bool:",
            "\t# Educational input validation",
            "\tif config.is_empty():",
            "\t\tpush_error(\"[${1:ComponentName}] Educational configuration required\")",
            "\t\treturn false",
            "\t",
            "\t# Store educational configuration",
            "\t_educational_state = config.duplicate(true)",
            "\t_is_initialized = true",
            "\t",
            "\t# Educational setup success",
            "\tprint(\"[${1:ComponentName}] Educational component initialized\")",
            "\treturn true",
            "",
            "## Get current educational state for learning analytics",
            "## @return Dictionary - Current educational configuration and progress",
            "func get_educational_state() -> Dictionary:",
            "\treturn _educational_state.duplicate(true)",
            "",
            "## Validate educational compliance for NeuroVis standards",
            "## @return bool - True if component meets educational requirements",
            "func validate_educational_compliance() -> bool:",
            "\tvar is_compliant: bool = true",
            "\t",
            "\t# Check educational documentation",
            "\tif LEARNING_OBJECTIVE.is_empty():",
            "\t\tpush_warning(\"[${1:ComponentName}] Missing learning objective\")",
            "\t\tis_compliant = false",
            "\t",
            "\t# Check accessibility compliance",
            "\tif not accessibility_enabled:",
            "\t\tpush_warning(\"[${1:ComponentName}] Accessibility should be enabled\")",
            "\t\tis_compliant = false",
            "\t",
            "\treturn is_compliant"
        ],
        "description": "Creates a complete NeuroVis educational component with standards compliance"
    },

    "NeuroVis Educational Function": {
        "prefix": "neuro-func",
        "body": [
            "## ${1:Function description for educational context}",
            "## Educational Impact: ${2:How this enhances learning}",
            "## @param ${3:param_name} ${4:Type} - ${5:Parameter description}",
            "## @return ${6:ReturnType} - ${7:Return value description}",
            "func ${8:function_name}(${3:param_name}: ${4:Type}) -> ${6:ReturnType}:",
            "\t# Educational input validation",
            "\tif ${9:validation_condition}:",
            "\t\tpush_error(\"[Educational] Invalid input for ${8:function_name}\")",
            "\t\treturn ${10:default_return_value}",
            "\t",
            "\t# Educational implementation",
            "\tvar result: ${6:ReturnType} = ${11:implementation}",
            "\t",
            "\t# Educational success logging",
            "\tprint(\"[Educational] ${8:function_name} completed successfully\")",
            "\treturn result"
        ],
        "description": "Creates an educational function with proper documentation and validation"
    },

    "NeuroVis Error Handler": {
        "prefix": "neuro-error",
        "body": [
            "## Handle educational platform error with user-friendly feedback",
            "## @param error_message String - Technical error description",
            "## @param educational_context String - Learning context for error",
            "## @return bool - True if error handled successfully",
            "func handle_educational_error(error_message: String, educational_context: String) -> bool:",
            "\t# Log technical error for developers",
            "\tpush_error(\"[NeuroVis] \" + error_message)",
            "\t",
            "\t# Provide educational user feedback",
            "\tvar user_message: String = \"Learning interaction encountered an issue in: \" + educational_context",
            "\tUIThemeManager.show_educational_notification(user_message)",
            "\t",
            "\t# Educational analytics tracking",
            "\tif has_method(\"track_educational_error\"):",
            "\t\ttrack_educational_error(error_message, educational_context)",
            "\t",
            "\treturn true"
        ],
        "description": "Creates educational error handling with user-friendly feedback"
    },

    "NeuroVis Performance Monitor": {
        "prefix": "neuro-perf",
        "body": [
            "# === EDUCATIONAL PERFORMANCE MONITORING ===",
            "var _performance_start_time: float",
            "var _memory_start_usage: int",
            "",
            "## Start educational performance monitoring",
            "## @param operation_name String - Name of educational operation being monitored",
            "func start_educational_performance_monitoring(operation_name: String) -> void:",
            "\t_performance_start_time = Time.get_time_dict_from_system().get(\"unix\", 0.0)",
            "\t_memory_start_usage = OS.get_static_memory_usage_by_type()",
            "\tprint(\"[NeuroVis Performance] Starting: \", operation_name)",
            "",
            "## End educational performance monitoring with validation",
            "## @param operation_name String - Name of educational operation completed",
            "## @return Dictionary - Performance metrics for educational platform",
            "func end_educational_performance_monitoring(operation_name: String) -> Dictionary:",
            "\tvar end_time: float = Time.get_time_dict_from_system().get(\"unix\", 0.0)",
            "\tvar end_memory: int = OS.get_static_memory_usage_by_type()",
            "\t",
            "\tvar metrics: Dictionary = {",
            "\t\t\"operation\": operation_name,",
            "\t\t\"duration_ms\": (end_time - _performance_start_time) * 1000.0,",
            "\t\t\"memory_delta_mb\": (end_memory - _memory_start_usage) / 1024.0 / 1024.0",
            "\t}",
            "\t",
            "\t# Validate educational performance targets",
            "\tif metrics.duration_ms > 16.67:  # 60fps target",
            "\t\tpush_warning(\"[NeuroVis] Educational operation exceeded 60fps target: \", operation_name)",
            "\t",
            "\tprint(\"[NeuroVis Performance] Completed: \", operation_name, \" in \", metrics.duration_ms, \"ms\")",
            "\treturn metrics"
        ],
        "description": "Creates educational performance monitoring with 60fps validation"
    },

    "NeuroVis Accessibility Helper": {
        "prefix": "neuro-a11y",
        "body": [
            "## Ensure accessibility compliance for educational component",
            "## Educational Context: ${1:Learning accessibility purpose}",
            "## @param component Control - UI component to make accessible",
            "## @return bool - True if accessibility features applied successfully",
            "func apply_educational_accessibility(component: Control) -> bool:",
            "\tif not is_instance_valid(component):",
            "\t\tpush_error(\"[NeuroVis A11y] Invalid component for accessibility\")",
            "\t\treturn false",
            "\t",
            "\t# WCAG 2.1 AA compliance for educational platform",
            "\tcomponent.focus_mode = Control.FOCUS_ALL",
            "\t",
            "\t# Educational screen reader support",
            "\tif component.has_method(\"set_accessible_name\"):",
            "\t\tcomponent.set_accessible_name(\"${2:Educational component description}\")",
            "\t",
            "\t# Educational keyboard navigation",
            "\tif component.has_method(\"set_accessible_role\"):",
            "\t\tcomponent.set_accessible_role(AccessibilityRole.BUTTON)",
            "\t",
            "\t# High contrast for visual accessibility",
            "\tif UIThemeManager.is_high_contrast_mode():",
            "\t\tcomponent.modulate = Color.WHITE",
            "\t",
            "\t# Educational tooltip for learning assistance",
            "\tcomponent.tooltip_text = \"${3:Educational tooltip for learning assistance}\"",
            "\t",
            "\tprint(\"[NeuroVis A11y] Accessibility applied to educational component\")",
            "\treturn true"
        ],
        "description": "Creates accessibility compliance for educational components"
    },

    "NeuroVis Quick Debug": {
        "prefix": "neuro-debug",
        "body": [
            "# === EDUCATIONAL DEBUG HELPER ===",
            "print(\"[NeuroVis Debug] ${1:Debug context}: \", ${2:variable_to_debug})",
            "if OS.is_debug_build():",
            "\tprint(\"[NeuroVis Debug] Educational state: \", get_educational_state())",
            "\tprint(\"[NeuroVis Debug] Performance metrics: \", _get_current_performance())"
        ],
        "description": "Quick debug output for NeuroVis educational development"
    }
}