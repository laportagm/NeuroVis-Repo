{
  "title": "Enhanced Claude Code CLI Prompt Generation Guidelines - NeuroVis Edition",
  "version": "3.0-NeuroVis",
  "description": "Comprehensive, project-specific instructions for generating clear, specific, and actionable prompts for the NeuroVis educational neuroscience visualization platform built with Godot 4.4.",

  "neurovis_context": {
    "project_overview": "NeuroVis is an advanced educational neuroscience visualization platform for interactive brain anatomy exploration, designed for medical students, neuroscience researchers, and healthcare professionals.",
    "tech_stack": {
      "engine": "Godot 4.4.1",
      "language": "GDScript",
      "ai_integrations": ["Claude Code CLI", "Gemini AI"],
      "mcp_servers": ["filesystem", "github", "godot-mcp", "sequential-thinking", "memory", "sqlite"]
    },
    "autoload_services": {
      "KB": "AnatomicalKnowledgeDatabase.gd",
      "KnowledgeService": "Core knowledge management",
      "AIAssistant": "AI assistant interface",
      "GeminiAI": "Gemini API integration",
      "UIThemeManager": "Educational UI theming",
      "AccessibilityManager": "WCAG 2.1 AA compliance",
      "DebugCmd": "Debug command system",
      "AIConfig": "AI configuration management"
    }
  },

  "quick_reference": {
    "title": "Quick Reference - NeuroVis Critical Points",
    "priority_guidelines": [
      "1. **Instant Usability**: Generated prompt must be ready for immediate copy-paste into Claude Code CLI without any modification",
      "2. **Explicit Role Definition**: Define Claude's role with Godot/GDScript expertise (e.g., 'You are an expert Godot 4.4 developer specializing in educational medical visualization')",
      "3. **Single Task Focus**: Each prompt targets one atomic, testable task in the NeuroVis codebase",
      "4. **MCP Server Integration**: Use godot-mcp for Godot tasks, filesystem for code analysis, sequential-thinking for complex educational workflows",
      "5. **Complete Context**: Include autoload services, scene structure, and educational requirements",
      "6. **Medical Accuracy**: Specify requirements for anatomical terminology and educational validity",
      "7. **Performance Standards**: Include 60fps target and memory optimization requirements for 3D visualization"
    ]
  },

  "sections": [
    {
      "title": "I. Core Prompt Generation Principles - NeuroVis Specific",
      "guidelines": [
        {
          "heading": "Be Unambiguously Clear with GDScript Context",
          "points": [
            "**Define the Task Precisely:** State exactly what Claude should do in the context of Godot and GDScript. Reference specific nodes, signals, and autoloads.",
            "**Specify NeuroVis Context:** Always mention relevant autoload services (KB, KnowledgeService, etc.) and the educational purpose of the feature.",
            "**Detail Expected Output:** For GDScript, specify class structure, signal definitions, export variables, and integration with existing services."
          ],
          "examples": {
            "poor_prompt": "Fix the brain model code",
            "excellent_prompt": "You are an expert Godot 4.4 developer specializing in educational medical visualization. Analyze the BrainModelController in `core/models/BrainModelController.gd`. Fix performance issues affecting the 60fps target when rotating complex brain models. Ensure the solution integrates with ModelSwitcherGlobal autoload and maintains smooth interaction. Use Godot's built-in profiling annotations and follow the project's error handling patterns with DebugCmd. Output the optimized GDScript code with inline comments explaining each optimization."
          }
        },
        {
          "heading": "Define Educational and Medical Context",
          "points": [
            "**Medical Accuracy:** Specify requirements for anatomical terminology validation and clinical relevance.",
            "**Educational Objectives:** Include learning goals and how the feature supports medical education.",
            "**Accessibility Requirements:** Mention WCAG 2.1 AA compliance needs through AccessibilityManager."
          ],
          "educational_role_examples": [
            "You are a Godot developer with expertise in medical education software and anatomical accuracy",
            "Act as a GDScript specialist focusing on interactive 3D educational experiences for medical students",
            "You are an educational UI/UX expert working with Godot's Control nodes for medical learning interfaces",
            "Assume the role of a performance optimization specialist for real-time 3D medical visualization in Godot"
          ]
        }
      ]
    },
    {
      "title": "II. NeuroVis-Specific Structure & Format",
      "guidelines": [
        {
          "heading": "GDScript Code Structure Requirements",
          "points": [
            "**Class Headers:** Always include proper GDScript class_name and extends declarations",
            "**Tool Scripts:** Use @tool annotation when appropriate for editor functionality",
            "**Signals:** Define signals at the top of the class after class_name",
            "**Export Variables:** Use @export with proper type hints for inspector variables",
            "**Autoload Integration:** Reference global autoloads using their singleton names"
          ],
          "gdscript_template": {
            "class_structure": [
              "class_name YourClassName",
              "extends Node3D",
              "",
              "## Educational purpose documentation",
              "## @tutorial: Link to educational docs",
              "",
              "signal structure_selected(structure_id: String)",
              "signal learning_objective_completed(objective_id: String)",
              "",
              "@export var anatomical_accuracy: float = 1.0",
              "@export var educational_mode: bool = true",
              "",
              "func _ready() -> void:",
              "    KB.connect(\"knowledge_updated\", _on_knowledge_updated)"
            ]
          }
        },
        {
          "heading": "NeuroVis MCP Server Selection",
          "mcp_usage_guide": {
            "godot-mcp": [
              "Scene manipulation and node operations",
              "Project structure analysis",
              "Resource management",
              "Signal connection debugging"
            ],
            "filesystem": [
              "Code analysis across multiple GDScript files",
              "Project-wide refactoring",
              "Documentation generation",
              "Test file analysis"
            ],
            "sequential-thinking": [
              "Complex educational workflow design",
              "Multi-step medical accuracy validation",
              "Learning path optimization",
              "Architecture planning for new features"
            ],
            "memory": [
              "Maintaining context across multiple related files",
              "Tracking refactoring progress",
              "Educational content consistency"
            ]
          }
        }
      ]
    },
    {
      "title": "III. NeuroVis Development Patterns",
      "guidelines": [
        {
          "heading": "Educational Feature Development",
          "workflow_template": [
            "Step 1: Analyze educational requirements and learning objectives",
            "Step 2: Validate medical terminology with KB service",
            "Step 3: Design UI/UX following UIThemeManager patterns",
            "Step 4: Implement with proper GDScript structure and signals",
            "Step 5: Integrate accessibility features via AccessibilityManager",
            "Step 6: Add debug commands to DebugCmd system",
            "Step 7: Create comprehensive tests following project patterns"
          ],
          "example_prompt": "claude execute --mcp-server godot-mcp --prompt 'You are an expert Godot developer specializing in medical education software. Create a new educational panel for displaying neural pathway information. Requirements: 1) Extend the base EducationalPanel class from ui/panels/base/, 2) Integrate with KB autoload for anatomical data, 3) Include learning objective tracking, 4) Support AccessibilityManager for screen readers, 5) Add smooth animations for student engagement, 6) Follow the project's signal patterns for selection events. Output complete GDScript implementation with proper documentation.'"
        },
        {
          "heading": "Performance Optimization Patterns",
          "points": [
            "Always consider 60fps target for smooth educational experience",
            "Optimize 3D model loading and rendering",
            "Use Godot's built-in profiling tools",
            "Implement level-of-detail for complex brain models",
            "Cache frequently accessed anatomical data"
          ]
        }
      ]
    },
    {
      "title": "IV. NeuroVis Testing & Validation",
      "guidelines": [
        {
          "heading": "Test-Driven Development",
          "test_patterns": [
            "Unit tests for individual components",
            "Integration tests with autoload services",
            "Educational validation tests",
            "Performance benchmarks",
            "Accessibility compliance tests"
          ],
          "test_example": "claude execute --mcp-server filesystem --prompt 'You are a Godot testing expert. Create comprehensive unit tests for the BrainStructureSelector class. Include tests for: 1) Signal emission on selection, 2) Integration with KB service, 3) Performance with 1000+ structures, 4) Accessibility keyboard navigation, 5) Educational metadata validation. Use the project's test patterns from tests/ directory. Output as GDScript extending the base test class.'"
        }
      ]
    },
    {
      "title": "V. Complete NeuroVis Examples",
      "examples": [
        {
          "scenario": "Adding AI-Powered Educational Feature",
          "prompt": "claude execute --mcp-server sequential-thinking --prompt 'You are an expert Godot developer specializing in AI-enhanced medical education. Design and implement an AI-powered quiz system for neuroanatomy. Think through: 1) Integration with GeminiAI service for question generation, 2) UI panel extending EducationalPanel base class, 3) Progress tracking with KnowledgeService, 4) Accessibility compliance via AccessibilityManager, 5) Performance optimization for smooth UI updates. Provide complete implementation plan with GDScript code examples for each component.'"
        },
        {
          "scenario": "Debugging Complex 3D Interaction",
          "prompt": "claude execute --mcp-server godot-mcp --prompt 'You are a Godot 3D interaction specialist. Debug the brain model selection system in scenes/main/node_3d.tscn. The issue: selections are not properly highlighting when using ray-casting. Analyze the scene structure, check signal connections, review the selection logic in associated scripts, and verify integration with ModelSwitcherGlobal. Provide specific fixes with code snippets and explain the root cause.'"
        },
        {
          "scenario": "Optimizing Educational Panel Performance",
          "prompt": "claude execute --mcp-server filesystem --prompt 'You are a Godot UI performance expert. Analyze all panels in ui/panels/ directory for performance bottlenecks. Focus on: 1) Unnecessary _process() calls, 2) Inefficient signal connections, 3) Memory leaks from unreleased resources, 4) Excessive draw calls. For each issue found, provide optimized GDScript code maintaining educational functionality while improving frame rate. Include specific measurements and expected performance gains.'"
        }
      ]
    },
    {
      "title": "VI. NeuroVis-Specific Patterns",
      "patterns": [
        {
          "pattern_name": "Educational Component Pattern",
          "template": "You are an expert Godot developer specializing in medical education. Create a [COMPONENT_TYPE] for [EDUCATIONAL_PURPOSE]. Requirements: 1) Extend appropriate base class from ui/components/, 2) Integrate with [RELEVANT_AUTOLOADS], 3) Include educational metadata and learning objectives, 4) Support accessibility via AccessibilityManager, 5) Follow project signal patterns, 6) Include debug commands for DebugCmd. Output complete GDScript implementation with documentation."
        },
        {
          "pattern_name": "Anatomical Data Integration Pattern",
          "template": "You are a Godot developer with medical knowledge. Implement [FEATURE] that queries anatomical data. Requirements: 1) Use KB service for data access, 2) Validate medical terminology, 3) Cache results for performance, 4) Handle errors gracefully with debug logging, 5) Include educational context in UI. Provide GDScript code following project patterns."
        },
        {
          "pattern_name": "3D Visualization Enhancement Pattern",
          "template": "You are a Godot 3D visualization expert. Enhance [3D_FEATURE] for better educational value. Consider: 1) 60fps performance target, 2) LOD implementation for complex models, 3) Smooth camera transitions, 4) Interactive highlighting, 5) Integration with ModelSwitcherGlobal, 6) Touch/mouse/keyboard input support. Output optimized GDScript with performance annotations."
        },
        {
          "pattern_name": "AI Service Integration Pattern",
          "template": "You are an AI integration specialist for Godot. Implement [AI_FEATURE] using [GeminiAI/AIAssistant] service. Include: 1) Proper async handling with await, 2) Error handling and fallbacks, 3) Loading states in UI, 4) Integration with AIConfig for API keys, 5) Educational prompt engineering, 6) Response validation for medical accuracy. Provide complete implementation with UI integration."
        }
      ]
    },
    {
      "title": "VII. Quality Checklist - NeuroVis Edition",
      "evaluation_criteria": [
        "**Godot Context**: Mentions specific Godot version, nodes, and features",
        "**GDScript Compliance**: Follows GDScript style guide and patterns",
        "**Autoload Usage**: References relevant global services correctly",
        "**Educational Purpose**: Includes medical education context",
        "**Medical Accuracy**: Specifies anatomical terminology requirements",
        "**Performance Target**: Mentions 60fps and optimization needs",
        "**Accessibility**: Includes WCAG 2.1 AA compliance requirements",
        "**Error Handling**: Uses DebugCmd system for logging",
        "**Testing Requirements**: Specifies test scenarios",
        "**MCP Server Choice**: Uses most appropriate server for task"
      ]
    }
  ],

  "neurovis_quick_commands": {
    "title": "NeuroVis Quick Command Reference",
    "commands": [
      {
        "task": "Analyze project structure",
        "command": "claude execute --mcp-server godot-mcp --prompt 'Analyze the NeuroVis project structure and provide insights on the scene hierarchy, autoload services, and architectural patterns used.'"
      },
      {
        "task": "Debug educational panel",
        "command": "claude execute --mcp-server filesystem --prompt 'Debug the [PanelName] in ui/panels/. Check for performance issues, signal connection problems, and accessibility compliance. Provide specific fixes.'"
      },
      {
        "task": "Optimize 3D performance",
        "command": "claude execute --mcp-server sequential-thinking --prompt 'Analyze and optimize the 3D brain model rendering pipeline for consistent 60fps performance. Consider LOD, culling, and material optimization.'"
      },
      {
        "task": "Add debug command",
        "command": "claude execute --mcp-server filesystem --prompt 'Add a new debug command to DebugCmd system for [PURPOSE]. Follow existing command patterns and include proper help text.'"
      }
    ]
  }
}
