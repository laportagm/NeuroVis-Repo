{
    "Neural Network Debug Print": {
        "prefix": "ndebug",
        "body": [
            "print(\"üß† Neural Debug: ${1:message} = \", ${2:variable})"
        ],
        "description": "Neural network debug print statement"
    },
    "Performance Timer": {
        "prefix": "perf",
        "body": [
            "var start_time = Time.get_time_dict_from_system()",
            "${1:# Your code here}",
            "var end_time = Time.get_time_dict_from_system()",
            "print(\"‚è±Ô∏è Performance: ${2:operation_name} took \", end_time[\"unix\"] - start_time[\"unix\"], \"s\")"
        ],
        "description": "Performance timing code block"
    },
    "Signal Connection": {
        "prefix": "connect",
        "body": [
            "${1:signal_name}.connect(${2:method_name})"
        ],
        "description": "Connect a signal to a method"
    },
    "Node Reference": {
        "prefix": "getnode",
        "body": [
            "var ${1:node_name} = get_node(\"${2:NodePath}\")"
        ],
        "description": "Get node reference"
    },
    "Safe Node Reference": {
        "prefix": "getnodeSafe",
        "body": [
            "var ${1:node_name} = get_node_or_null(\"${2:NodePath}\")",
            "if ${1:node_name}:",
            "\t${3:# Node exists, use it}",
            "else:",
            "\tprint(\"‚ö†Ô∏è Warning: Node ${2:NodePath} not found\")"
        ],
        "description": "Safe node reference with null check"
    },
    "A1-NeuroVis Model Switch": {
        "prefix": "modelswitch",
        "body": [
            "if ModelSwitcherGlobal:",
            "\tModelSwitcherGlobal.switch_to_model(\"${1:model_name}\")",
            "else:",
            "\tprint(\"‚ö†Ô∏è ModelSwitcherGlobal not available\")"
        ],
        "description": "Switch neural model using global switcher"
    },
    "Neural Structure Debug": {
        "prefix": "nstruct",
        "body": [
            "print(\"üß† Structure Analysis:\")",
            "print(\"  - Name: \", ${1:structure}.name)",
            "print(\"  - Position: \", ${1:structure}.global_position)",
            "print(\"  - Visible: \", ${1:structure}.visible)",
            "print(\"  - Children: \", ${1:structure}.get_child_count())"
        ],
        "description": "Debug neural structure properties"
    },
    "Error Handler": {
        "prefix": "errorhandle",
        "body": [
            "if ${1:condition}:",
            "\tprint(\"‚ùå Error: ${2:error_message}\")",
            "\treturn ${3:false}",
            "",
            "${4:# Success case}"
        ],
        "description": "Error handling pattern"
    },
    "Knowledge Base Query": {
        "prefix": "kbquery",
        "body": [
            "if KB:",
            "\tvar result = KB.get_info(\"${1:structure_name}\")",
            "\tif result:",
            "\t\tprint(\"üìö KB Info: \", result)",
            "\telse:",
            "\t\tprint(\"üìö No KB info for: ${1:structure_name}\")"
        ],
        "description": "Query knowledge base for structure info"
    },
    "Visual Debug Toggle": {
        "prefix": "vdebug",
        "body": [
            "if DebugCmd:",
            "\tDebugCmd.run_command(\"${1:debug_command}\")",
            "else:",
            "\tprint(\"üîß Debug commands not available\")"
        ],
        "description": "Toggle visual debugging features"
    }
}